#SARIMAX PLOTTING

##FUNCTIONS
plot_sarimax_forecasts <- function(ts_data, results, window_type = "Rolling", 
                                   window_size = 36, horizon = 6, 
                                   show_all_forecasts = TRUE, highlight_window = NULL) {
  
  # Convert time series to data frame
  ts_df <- data.frame(
    Date = as.Date(time(ts_data)),
    Actual = as.numeric(ts_data)
  )
  
  # Initialize forecast data frame
  forecast_df <- data.frame()
  
  # Process each forecast window
  for(i in 1:length(results$forecasts)) {
    
    if(window_type == "Rolling") {
      # For rolling window
      test_start_idx <- i + window_size
      test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
      train_start_idx <- i
      train_end_idx <- i + window_size - 1
    } else {
      # For growing window  
      train_start_idx <- 1
      train_end_idx <- window_size + i - 1  # Updated for growing window logic
      test_start_idx <- train_end_idx + 1
      test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
    }
    
    # Skip if indices are invalid
    if(test_start_idx > length(ts_data)) next
    
    # Get forecast dates
    forecast_dates <- as.Date(time(ts_data))[test_start_idx:test_end_idx]
    
    # Get forecast values and confidence intervals
    forecast_mean <- as.numeric(results$forecasts[[i]]$mean)
    forecast_lower <- as.numeric(results$forecasts[[i]]$lower[,2])  # 95% CI
    forecast_upper <- as.numeric(results$forecasts[[i]]$upper[,2])  # 95% CI
    
    # Adjust length if needed
    n_forecast <- length(forecast_dates)
    forecast_mean <- forecast_mean[1:n_forecast]
    forecast_lower <- forecast_lower[1:n_forecast]
    forecast_upper <- forecast_upper[1:n_forecast]
    
    # Create forecast data frame for this window
    temp_df <- data.frame(
      Date = forecast_dates,
      Forecast = forecast_mean,
      Lower_CI = forecast_lower,
      Upper_CI = forecast_upper,
      Window = i,
      TrainStart = as.Date(time(ts_data))[train_start_idx],
      TrainEnd = as.Date(time(ts_data))[train_end_idx]
    )
    
    forecast_df <- rbind(forecast_df, temp_df)
  }
  
  # Create the base plot
  p <- ggplot() +
    # Plot actual time series
    geom_line(data = ts_df, aes(x = Date, y = Actual), 
              color = "black", size = 0.8, alpha = 0.7) +
    labs(title = paste(window_type, "Window SARIMAX Forecasting"),
         subtitle = paste("Training Window:", window_size, "months | Forecast Horizon:", horizon, "months"),
         x = "Date", y = "Value") +
    theme_minimal() +
    theme(legend.position = "bottom",
          plot.title = element_text(size = 14, face = "bold"),
          axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Add forecasts
  if(show_all_forecasts) {
    # Show all forecast windows
    if(!is.null(highlight_window) && highlight_window <= max(forecast_df$Window)) {
      # Highlight specific window
      other_windows <- forecast_df[forecast_df$Window != highlight_window, ]
      highlight_data <- forecast_df[forecast_df$Window == highlight_window, ]
      
      # Other windows (less prominent) - use points for growing windows to show gaps
      if(nrow(other_windows) > 0) {
        if(window_type == "Growing") {
          p <- p + 
            geom_ribbon(data = other_windows, 
                        aes(x = Date, ymin = Lower_CI, ymax = Upper_CI, group = Window),
                        alpha = 0.1, fill = "blue") +
            geom_point(data = other_windows, 
                       aes(x = Date, y = Forecast),
                       color = "blue", alpha = 0.4, size = 1) +
            geom_line(data = other_windows, 
                      aes(x = Date, y = Forecast, group = Window),
                      color = "blue", alpha = 0.3, size = 0.5)
        } else {
          p <- p + 
            geom_ribbon(data = other_windows, 
                        aes(x = Date, ymin = Lower_CI, ymax = Upper_CI, group = Window),
                        alpha = 0.1, fill = "blue") +
            geom_line(data = other_windows, 
                      aes(x = Date, y = Forecast, group = Window),
                      color = "blue", alpha = 0.3, size = 0.5)
        }
      }
      
      # Highlighted window
      if(nrow(highlight_data) > 0) {
        p <- p + 
          geom_ribbon(data = highlight_data, 
                      aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                      alpha = 0.3, fill = "red") +
          geom_line(data = highlight_data, 
                    aes(x = Date, y = Forecast),
                    color = "red", size = 1.2) +
          geom_point(data = highlight_data, 
                     aes(x = Date, y = Forecast),
                     color = "red", size = 2)
      }
      
      p <- p + 
        scale_color_manual(name = "Legend",
                           values = c("Actual Data" = "black", 
                                      "Other Forecasts" = "blue", 
                                      "Highlighted Forecast" = "red"))
      
    } else {
      # Show all windows equally
      if(window_type == "Growing") {
        # For growing windows, emphasize the individual forecast segments
        p <- p + 
          geom_ribbon(data = forecast_df, 
                      aes(x = Date, ymin = Lower_CI, ymax = Upper_CI, group = Window),
                      alpha = 0.15, fill = "blue") +
          geom_point(data = forecast_df, 
                     aes(x = Date, y = Forecast),
                     color = "blue", alpha = 0.7, size = 1.5) +
          geom_line(data = forecast_df, 
                    aes(x = Date, y = Forecast, group = Window),
                    color = "blue", alpha = 0.6, size = 0.7)
      } else {
        # For rolling windows, show continuous lines
        p <- p + 
          geom_ribbon(data = forecast_df, 
                      aes(x = Date, ymin = Lower_CI, ymax = Upper_CI, group = Window),
                      alpha = 0.15, fill = "blue") +
          geom_line(data = forecast_df, 
                    aes(x = Date, y = Forecast, group = Window),
                    color = "blue", alpha = 0.6, size = 0.7)
      }
    }
  } else {
    # Show only the last forecast (most recent)
    last_forecast <- forecast_df[forecast_df$Window == max(forecast_df$Window), ]
    
    p <- p + 
      geom_ribbon(data = last_forecast, 
                  aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                  alpha = 0.3, fill = "blue") +
      geom_line(data = last_forecast, 
                aes(x = Date, y = Forecast),
                color = "blue", size = 1.2) +
      geom_point(data = last_forecast, 
                 aes(x = Date, y = Forecast),
                 color = "blue", size = 2)
  }
  
  # Format x-axis for monthly data
  p <- p + scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months")
  
  return(p)
}

# Function to create side-by-side comparison
plot_rolling_vs_growing <- function(ts_data, rolling_results, growing_results, 
                                    window_size = 36, horizon = 6) {
  
  # Create rolling window plot
  p1 <- plot_sarimax_forecasts(ts_data, rolling_results, "Rolling", 
                               window_size, horizon, show_all_forecasts = TRUE)
  
  # Create growing window plot  
  p2 <- plot_sarimax_forecasts(ts_data, growing_results, "Growing", 
                               window_size, horizon, show_all_forecasts = TRUE)
  
  # Display plots side by side
  library(gridExtra)
  combined_plot <- grid.arrange(p1, p2, nrow = 2)
  
  return(combined_plot)
}

# Function to plot specific forecast window in detail
plot_detailed_forecast <- function(ts_data, results, window_num, window_type = "Rolling",
                                   window_size = 36, horizon = 6) {
  
  if(window_num > length(results$forecasts)) {
    stop("Window number exceeds available forecasts")
  }
  
  # Calculate window indices based on your new logic
  if(window_type == "Rolling") {
    train_start_idx <- window_num
    train_end_idx <- window_num + window_size - 1
    test_start_idx <- train_end_idx + 1
    test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
  } else {
    # Growing window logic - updated to match your code
    train_start_idx <- 1
    train_end_idx <- window_size + window_num - 1  # This matches your growing window logic
    test_start_idx <- train_end_idx + 1
    test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
  }
  
  # Create detailed plot data
  plot_start_idx <- max(1, train_start_idx - 12)  # Show 12 months before training
  plot_end_idx <- min(length(ts_data), test_end_idx + 6)  # Show 6 months after forecast
  
  plot_dates <- as.Date(time(ts_data))[plot_start_idx:plot_end_idx]
  plot_actual <- as.numeric(ts_data)[plot_start_idx:plot_end_idx]
  
  # Create base data frame
  plot_df <- data.frame(
    Date = plot_dates,
    Actual = plot_actual,
    Type = "Historical"
  )
  
  # Mark training period
  plot_df$Type[plot_df$Date >= as.Date(time(ts_data))[train_start_idx] & 
                 plot_df$Date <= as.Date(time(ts_data))[train_end_idx]] <- "Training"
  
  # Mark actual test period
  plot_df$Type[plot_df$Date >= as.Date(time(ts_data))[test_start_idx] & 
                 plot_df$Date <= as.Date(time(ts_data))[test_end_idx]] <- "Test"
  
  # Add forecast data
  forecast_dates <- as.Date(time(ts_data))[test_start_idx:test_end_idx]
  forecast_mean <- as.numeric(results$forecasts[[window_num]]$mean)[1:length(forecast_dates)]
  forecast_lower <- as.numeric(results$forecasts[[window_num]]$lower[,2])[1:length(forecast_dates)]
  forecast_upper <- as.numeric(results$forecasts[[window_num]]$upper[,2])[1:length(forecast_dates)]
  
  forecast_df <- data.frame(
    Date = forecast_dates,
    Forecast = forecast_mean,
    Lower_CI = forecast_lower,
    Upper_CI = forecast_upper
  )
  
  # Create the plot
  p <- ggplot() +
    geom_line(data = plot_df, aes(x = Date, y = Actual, color = Type), size = 1) +
    geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                alpha = 0.3, fill = "red") +
    geom_line(data = forecast_df, aes(x = Date, y = Forecast), 
              color = "red", size = 1.2, linetype = "dashed") +
    geom_point(data = forecast_df, aes(x = Date, y = Forecast), 
               color = "red", size = 2) +
    scale_color_manual(values = c("Historical" = "gray50", 
                                  "Training" = "blue", 
                                  "Test" = "black")) +
    labs(title = paste("Detailed", window_type, "Window Forecast - Window", window_num),
         subtitle = paste("Training:", as.Date(time(ts_data))[train_start_idx], "to", 
                          as.Date(time(ts_data))[train_end_idx], 
                          "| Forecast:", as.Date(time(ts_data))[test_start_idx], "to", 
                          as.Date(time(ts_data))[test_end_idx]),
         x = "Date", y = "Value", color = "Data Type") +
    theme_minimal() +
    theme(legend.position = "bottom",
          axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")
  
  return(p)
}

# Updated rolling window progression function
plot_rolling_window_progression <- function(ts_data, results, window_size = 36, horizon = 6) {
  
  # Convert time series to data frame
  ts_df <- data.frame(
    Date = as.Date(time(ts_data)),
    Actual = as.numeric(ts_data)
  )
  
  # Create the base plot
  p <- ggplot() +
    geom_line(data = ts_df, aes(x = Date, y = Actual), 
              color = "black", size = 1, alpha = 0.8) +
    labs(title = "Rolling Window SARIMAX: Overlapping Forecasts",
         subtitle = paste("Each forecast uses a fixed", window_size, "month training window |", 
                          "Forecast Horizon:", horizon, "months"),
         x = "Date", y = "Value") +
    theme_minimal() +
    theme(legend.position = "bottom")
  
  # Create gradient colors from light to dark blue to show progression
  n_windows <- length(results$forecasts)
  colors <- colorRampPalette(c("lightblue", "darkblue"))(n_windows)
  alphas <- seq(0.3, 0.8, length.out = n_windows)
  
  # Add training window indicators for first few and last few windows
  show_windows <- c(1, 2, 3, n_windows-2, n_windows-1, n_windows)
  show_windows <- show_windows[show_windows <= n_windows & show_windows > 0]
  
  for(i in 1:length(results$forecasts)) {
    # Calculate indices for this rolling window (updated logic)
    train_start_idx <- i
    train_end_idx <- i + window_size - 1
    test_start_idx <- train_end_idx + 1
    test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
    
    if(test_start_idx > length(ts_data)) next
    
    # Get forecast data
    forecast_dates <- as.Date(time(ts_data))[test_start_idx:test_end_idx]
    forecast_mean <- as.numeric(results$forecasts[[i]]$mean)[1:length(forecast_dates)]
    forecast_lower <- as.numeric(results$forecasts[[i]]$lower[,2])[1:length(forecast_dates)]
    forecast_upper <- as.numeric(results$forecasts[[i]]$upper[,2])[1:length(forecast_dates)]
    
    # Create forecast data frame
    temp_df <- data.frame(
      Date = forecast_dates,
      Forecast = forecast_mean,
      Lower_CI = forecast_lower,
      Upper_CI = forecast_upper
    )
    
    # Determine line properties based on window position
    if(i %in% show_windows) {
      # Highlighted windows (first few and last few)
      line_size <- 1.2
      point_size <- 2
      alpha_ribbon <- 0.3
      alpha_line <- 0.9
    } else {
      # Other windows (more subtle)
      line_size <- 0.6
      point_size <- 1
      alpha_ribbon <- 0.1
      alpha_line <- 0.4
    }
    
    # Add forecast to plot
    p <- p + 
      geom_ribbon(data = temp_df, aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                  alpha = alpha_ribbon, fill = colors[i]) +
      geom_line(data = temp_df, aes(x = Date, y = Forecast),
                color = colors[i], size = line_size, alpha = alpha_line) +
      geom_point(data = temp_df, aes(x = Date, y = Forecast),
                 color = colors[i], size = point_size, alpha = alpha_line)
  }
  
  # Add training window indicators for selected windows
  if(length(show_windows) > 0) {
    for(window_num in show_windows[1:min(3, length(show_windows))]) {
      train_start_date <- as.Date(time(ts_data))[window_num]
      train_end_date <- as.Date(time(ts_data))[window_num + window_size - 1]
      
      # Add subtle vertical lines to show training windows
      p <- p + 
        geom_vline(xintercept = train_start_date, linetype = "dotted", 
                   color = colors[window_num], alpha = 0.5) +
        geom_vline(xintercept = train_end_date, linetype = "dashed", 
                   color = colors[window_num], alpha = 0.7)
    }
  }
  
  # Add legend annotations
  legend_y <- max(ts_df$Actual) * 0.95
  p <- p + 
    annotate("text", x = min(ts_df$Date), y = legend_y, 
             label = "Lighter = Earlier Windows\nDarker = Later Windows", 
             hjust = 0, size = 3.5, color = "gray30")
  
  # Format x-axis
  p <- p + scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  return(p)
}

# Updated growing window progression function
plot_growing_window_progression <- function(ts_data, results, initial_window = 36, horizon = 6) {
  
  # Convert time series to data frame
  ts_df <- data.frame(
    Date = as.Date(time(ts_data)),
    Actual = as.numeric(ts_data)
  )
  
  # Create the base plot
  p <- ggplot() +
    geom_line(data = ts_df, aes(x = Date, y = Actual), 
              color = "black", size = 1, alpha = 0.8) +
    labs(title = "Growing Window SARIMAX: Progressive Forecasting",
         subtitle = paste("Each forecast uses progressively more training data |", 
                          "Initial Window:", initial_window, "months | Horizon:", horizon, "months"),
         x = "Date", y = "Value") +
    theme_minimal() +
    theme(legend.position = "bottom")
  
  # Add forecasts with different colors for progression
  colors <- rainbow(length(results$forecasts), start = 0.6, end = 0.9)
  
  for(i in 1:length(results$forecasts)) {
    # Calculate indices for this window (updated to match your growing window logic)
    train_start_idx <- 1  # Always start from beginning
    train_end_idx <- initial_window + i - 1  # Growing window size
    test_start_idx <- train_end_idx + 1
    test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
    
    if(test_start_idx > length(ts_data)) next
    
    # Get forecast data
    forecast_dates <- as.Date(time(ts_data))[test_start_idx:test_end_idx]
    forecast_mean <- as.numeric(results$forecasts[[i]]$mean)[1:length(forecast_dates)]
    forecast_lower <- as.numeric(results$forecasts[[i]]$lower[,2])[1:length(forecast_dates)]
    forecast_upper <- as.numeric(results$forecasts[[i]]$upper[,2])[1:length(forecast_dates)]
    
    # Add forecast to plot
    temp_df <- data.frame(
      Date = forecast_dates,
      Forecast = forecast_mean,
      Lower_CI = forecast_lower,
      Upper_CI = forecast_upper
    )
    
    p <- p + 
      geom_ribbon(data = temp_df, aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                  alpha = 0.2, fill = colors[i]) +
      geom_line(data = temp_df, aes(x = Date, y = Forecast),
                color = colors[i], size = 1) +
      geom_point(data = temp_df, aes(x = Date, y = Forecast),
                 color = colors[i], size = 1.5)
  }
  
  # Add training period indicators for first and last windows
  first_train_end <- as.Date(time(ts_data))[initial_window]
  last_train_end <- as.Date(time(ts_data))[initial_window + length(results$forecasts) - 1]
  
  p <- p + 
    geom_vline(xintercept = first_train_end, linetype = "dashed", color = "gray50", alpha = 0.7) +
    geom_vline(xintercept = last_train_end, linetype = "dashed", color = "gray50", alpha = 0.7) +
    annotate("text", x = first_train_end, y = max(ts_df$Actual) * 0.9, 
             label = "First Training End", angle = 90, vjust = -0.5, size = 3) +
    annotate("text", x = last_train_end, y = max(ts_df$Actual) * 0.9, 
             label = "Last Training End", angle = 90, vjust = -0.5, size = 3)
  
  # Format x-axis
  p <- p + scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  return(p)
}

# Function to create an animated-style rolling window plot (shows window movement)
plot_rolling_window_movement <- function(ts_data, results, window_size = 36, horizon = 6, 
                                         show_window = NULL) {
  
  if(is.null(show_window)) {
    show_window <- ceiling(length(results$forecasts) / 2)  # Show middle window by default
  }
  
  # Convert time series to data frame
  ts_df <- data.frame(
    Date = as.Date(time(ts_data)),
    Actual = as.numeric(ts_data)
  )
  
  # Calculate window indices (updated logic)
  train_start_idx <- show_window
  train_end_idx <- show_window + window_size - 1
  test_start_idx <- train_end_idx + 1
  test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
  
  # Create data segments
  before_train <- ts_df[1:(train_start_idx-1), ]
  train_data <- ts_df[train_start_idx:train_end_idx, ]
  test_data <- ts_df[test_start_idx:test_end_idx, ]
  after_test <- if(test_end_idx < nrow(ts_df)) ts_df[(test_end_idx+1):nrow(ts_df), ] else data.frame()
  
  # Get forecast data
  forecast_dates <- as.Date(time(ts_data))[test_start_idx:test_end_idx]
  forecast_mean <- as.numeric(results$forecasts[[show_window]]$mean)[1:length(forecast_dates)]
  forecast_lower <- as.numeric(results$forecasts[[show_window]]$lower[,2])[1:length(forecast_dates)]
  forecast_upper <- as.numeric(results$forecasts[[show_window]]$upper[,2])[1:length(forecast_dates)]
  
  forecast_df <- data.frame(
    Date = forecast_dates,
    Forecast = forecast_mean,
    Lower_CI = forecast_lower,
    Upper_CI = forecast_upper
  )
  
  # Create the plot
  p <- ggplot() +
    # Historical data (before training)
    geom_line(data = before_train, aes(x = Date, y = Actual), 
              color = "gray70", size = 0.8, alpha = 0.6) +
    # Training data (highlighted)
    geom_line(data = train_data, aes(x = Date, y = Actual), 
              color = "blue", size = 1.2) +
    # Test data (actual values to compare against)
    geom_line(data = test_data, aes(x = Date, y = Actual), 
              color = "black", size = 1.2) +
    # Future data (if any)
    {if(nrow(after_test) > 0) geom_line(data = after_test, aes(x = Date, y = Actual), 
                                        color = "gray70", size = 0.8, alpha = 0.6)} +
    # Forecast with confidence interval
    geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                alpha = 0.3, fill = "red") +
    geom_line(data = forecast_df, aes(x = Date, y = Forecast),
              color = "red", size = 1.5, linetype = "dashed") +
    geom_point(data = forecast_df, aes(x = Date, y = Forecast),
               color = "red", size = 2.5) +
    # Add vertical separators
    geom_vline(xintercept = train_data$Date[1], linetype = "solid", color = "blue", alpha = 0.7) +
    geom_vline(xintercept = train_data$Date[nrow(train_data)], linetype = "solid", color = "blue", alpha = 0.7) +
    geom_vline(xintercept = test_data$Date[1], linetype = "solid", color = "red", alpha = 0.7) +
    # Labels and theme
    labs(title = paste("Rolling Window", show_window, "- SARIMAX Training and Forecasting"),
         subtitle = paste("Blue: Training Data (", window_size, "months) | Red: Forecast (", horizon, "months) | Black: Actual Test Values"),
         x = "Date", y = "Value") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")
  
  return(p)
}

# Function to create an animated-style growing window plot (shows window expansion)
plot_growing_window_movement <- function(ts_data, results, initial_window = 36, horizon = 6, 
                                         show_window = NULL) {
  
  if(is.null(show_window)) {
    show_window <- ceiling(length(results$forecasts) / 2)  # Show middle window by default
  }
  
  # Convert time series to data frame
  ts_df <- data.frame(
    Date = as.Date(time(ts_data)),
    Actual = as.numeric(ts_data)
  )
  
  # Calculate window indices for growing window (updated logic)
  train_start_idx <- 1  # Always starts from beginning
  train_end_idx <- initial_window + show_window - 1  # Growing window size
  test_start_idx <- train_end_idx + 1
  test_end_idx <- min(test_start_idx + horizon - 1, length(ts_data))
  
  # Create data segments
  train_data <- ts_df[train_start_idx:train_end_idx, ]
  test_data <- ts_df[test_start_idx:test_end_idx, ]
  after_test <- if(test_end_idx < nrow(ts_df)) ts_df[(test_end_idx+1):nrow(ts_df), ] else data.frame()
  
  # Highlight the initial window vs the additional data
  initial_train <- ts_df[train_start_idx:initial_window, ]
  additional_train <- if(train_end_idx > initial_window) ts_df[(initial_window+1):train_end_idx, ] else data.frame()
  
  # Get forecast data
  forecast_dates <- as.Date(time(ts_data))[test_start_idx:test_end_idx]
  forecast_mean <- as.numeric(results$forecasts[[show_window]]$mean)[1:length(forecast_dates)]
  forecast_lower <- as.numeric(results$forecasts[[show_window]]$lower[,2])[1:length(forecast_dates)]
  forecast_upper <- as.numeric(results$forecasts[[show_window]]$upper[,2])[1:length(forecast_dates)]
  
  forecast_df <- data.frame(
    Date = forecast_dates,
    Forecast = forecast_mean,
    Lower_CI = forecast_lower,
    Upper_CI = forecast_upper
  )
  
  # Create the plot
  p <- ggplot() +
    # Initial training window (highlighted differently)
    geom_line(data = initial_train, aes(x = Date, y = Actual), 
              color = "darkblue", size = 1.0, alpha = 0.7) +
    # Additional training data (showing growth)
    {if(nrow(additional_train) > 0) geom_line(data = additional_train, aes(x = Date, y = Actual), 
                                              color = "lightblue", size = 1.2)} +
    # Test data (actual values to compare against)
    geom_line(data = test_data, aes(x = Date, y = Actual), 
              color = "black", size = 1.2) +
    # Future data (if any)
    {if(nrow(after_test) > 0) geom_line(data = after_test, aes(x = Date, y = Actual), 
                                        color = "gray70", size = 0.8, alpha = 0.6)} +
    # Forecast with confidence interval
    geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower_CI, ymax = Upper_CI),
                alpha = 0.3, fill = "red") +
    geom_line(data = forecast_df, aes(x = Date, y = Forecast),
              color = "red", size = 1.5, linetype = "dashed") +
    geom_point(data = forecast_df, aes(x = Date, y = Forecast),
               color = "red", size = 2.5) +
    # Add vertical separators
    geom_vline(xintercept = initial_train$Date[nrow(initial_train)], 
               linetype = "dotted", color = "darkblue", alpha = 0.8, size = 1) +
    geom_vline(xintercept = train_data$Date[nrow(train_data)], 
               linetype = "solid", color = "lightblue", alpha = 0.8, size = 1) +
    geom_vline(xintercept = test_data$Date[1], 
               linetype = "solid", color = "red", alpha = 0.7) +
    # Add annotations
    annotate("text", x = initial_train$Date[ceiling(nrow(initial_train)/2)], 
             y = max(ts_df$Actual) * 0.95, 
             label = paste("Initial Window\n(", initial_window, " months)"), 
             color = "darkblue", size = 3, hjust = 0.5) +
    {if(nrow(additional_train) > 0) 
      annotate("text", x = additional_train$Date[ceiling(nrow(additional_train)/2)], 
               y = max(ts_df$Actual) * 0.85, 
               label = paste("Added Data\n(+", nrow(additional_train), " months)"), 
               color = "lightblue", size = 3, hjust = 0.5)} +
    # Labels and theme
    labs(title = paste("Growing Window", show_window, "- SARIMAX Training Expansion"),
         subtitle = paste("Dark Blue: Initial Window (", initial_window, "months) | Light Blue: Added Data | Red: Forecast (", horizon, "months) | Black: Actual Test"),
         x = "Date", y = "Value") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_x_date(date_labels = "%Y-%m", date_breaks = "4 months")
  
  # Add summary info
  total_train_months <- train_end_idx - train_start_idx + 1
  p <- p + 
    annotate("text", x = min(ts_df$Date), y = min(ts_df$Actual), 
             label = paste("Total Training:", total_train_months, "months"), 
             hjust = 0, vjust = 0, size = 3.5, color = "gray30",
             fontface = "bold")
  
  return(p)
}

# USAGE EXAMPLES for the updated functions:


plot_rolling_window_progression(y_ts, results_arimax_rolling_window,
                                window_size = 36, horizon = 6)


plot_growing_window_progression(y_ts, results_arimax_growing_window,
                                initial_window = 36, horizon = 6)


plot_rolling_window_movement(y_ts, results_arimax_rolling_window,
                             window_size = 36, horizon = 6, show_window = 5)

plot_growing_window_movement(y_ts, results_arimax_growing_window,
                             initial_window = 36, horizon = 6, show_window = 5)

